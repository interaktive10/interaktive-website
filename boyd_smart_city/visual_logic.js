/* eslint-disable */

/**
 * Generated by Verge3D Puzzles v.4.3.1
 * Wed, 16 Aug 2023 07:21:43 GMT
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */
function createPL(v3d = window.v3d) {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.openedFileMeta = {};
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};
_pGlob.customEvents = new v3d.EventDispatcher();
_pGlob.eventListeners = [];

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster(); // always check visibility

var PL = {};
// backward compatibility
if (v3d[Symbol.toStringTag] !== 'Module') {
    v3d.PL = v3d.puzzles = PL;
}

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    // utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}

// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}

// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = false;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = false;
_initGlob.output.initOptions.useCompAssets = true;
_initGlob.output.initOptions.useFullscreen = false;


// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  setHTMLElemAttribute('style', ['Left',Math.round(_initGlob.percentage),'%'].join(''), '', false);
  setHTMLElemAttribute('innerHTML', String(Math.round(_initGlob.percentage)) + '%', 'loading-value', false);
  setHTMLElemStyle('width', String(Math.round(_initGlob.percentage)) + '%', 'loading-bar-inner', false);
  setHTMLElemStyle('maxWidth', '100%', 'loading-bar-inner', false);
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  setHTMLElemStyle('display', 'none', 'preloader_div', false);
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["hide_navigation_buttons"] = hide_navigation_buttons;
this.procedures["show_main_annotations"] = show_main_annotations;
this.procedures["set_css_rule_main_annotaiton"] = set_css_rule_main_annotaiton;
this.procedures["go_back"] = go_back;
this.procedures["go_home"] = go_home;
this.procedures["sub_industries_selection"] = sub_industries_selection;
this.procedures["sub_industries_selection_back_button"] = sub_industries_selection_back_button;
this.procedures["add_annotation_sub_industries"] = add_annotation_sub_industries;
this.procedures["set_css_rule_sub_annotation"] = set_css_rule_sub_annotation;
this.procedures["set_css_rule_internal_sub_annotation"] = set_css_rule_internal_sub_annotation;
this.procedures["get_sub_industries_list"] = get_sub_industries_list;
this.procedures["show_internal_blocks"] = show_internal_blocks;
this.procedures["hide_vehicle_solution_annotations"] = hide_vehicle_solution_annotations;
this.procedures["internal_clicks"] = internal_clicks;
this.procedures["show_navigation"] = show_navigation;
this.procedures["startPreloader"] = startPreloader;
this.procedures["updatePreloader"] = updatePreloader;
this.procedures["endPreloader"] = endPreloader;

var main_block_empties, industry, selected_industry, sub_industries_annotation_ids, popup_text, annotation_name, object_name, interior_scene, internal_text_content, header, home_button, back_button, help_button, percentage, main_blocks, selected_sub_industry, inception_level, sub_industries_objects, sub_industries, internal_text, annotation_id, i, block, ev_solution_annotations, internal_view, j, k, m;

// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}

// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}

// featureAvailable puzzle
function featureAvailable(feature) {

    var userAgent = window.navigator.userAgent;
    var platform = window.navigator.platform;

    switch (feature) {
    case 'LINUX':
        return /Linux/.test(platform);
    case 'WINDOWS':
        return ['Win32', 'Win64', 'Windows', 'WinCE'].indexOf(platform) !== -1;
    case 'MACOS':
        return (['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'].indexOf(platform) !== -1 && !v3d.Detector.checkIOS());
    case 'IOS':
        return v3d.Detector.checkIOS();
    case 'ANDROID':
        return /Android/i.test(userAgent);
    case 'MOBILE':
        return (/Android|webOS|BlackBerry/i.test(userAgent) || v3d.Detector.checkIOS());

    case 'CHROME':
        // Chromium based
        return (!!window.chrome && !/Edge/.test(navigator.userAgent));
    case 'FIREFOX':
        return /Firefox/.test(navigator.userAgent);
    case 'IE':
        return /Trident/.test(navigator.userAgent);
    case 'EDGE':
        return /Edge/.test(navigator.userAgent);
    case 'SAFARI':
        return (/Safari/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent));

    case 'TOUCH':
        return !!(('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch);
    case 'RETINA':
        return window.devicePixelRatio >= 2;
    case 'HDR':
        return appInstance.useHDR;
    case 'WEBAUDIO':
        return v3d.Detector.checkWebAudio();
    case 'WEBGL':
        var canvas = document.createElement('canvas');
        var gl = canvas.getContext('webgl')
        return !!gl;
    case 'WEBGL2':
        var canvas = document.createElement('canvas');
        var gl = canvas.getContext('webgl2')
        return !!gl;
    case 'WOOCOMMERCE':
        var woo_fun = window.parent.v3d_woo_get_product_info || window.parent.parent.v3d_woo_get_product_info;
        return !!woo_fun;
    case 'DO_NOT_TRACK':
        if (navigator.doNotTrack == '1' || window.doNotTrack == '1')
            return true;
        else
            return false;
    default:
        return false;
    }

}

function _checkListenersSame(target0, type0, listener0, optionsOrUseCapture0,
        target1, type1, listener1, optionsOrUseCapture1) {
    const capture0 = Boolean(optionsOrUseCapture0 instanceof Object
            ? optionsOrUseCapture0.capture : optionsOrUseCapture0);
    const capture1 = Boolean(optionsOrUseCapture1 instanceof Object
            ? optionsOrUseCapture1.capture : optionsOrUseCapture1);
    return target0 === target1 && type0 === type1 && listener0 === listener1
            && capture0 === capture1;
}

/**
 * Add the specified event listener to the specified target. This function also
 * stores listener data for easier disposing.
 */
function bindListener(target, type, listener, optionsOrUseCapture) {
    const alreadyExists = _pGlob.eventListeners.some(elem => {
        return _checkListenersSame(elem.target, elem.type, elem.listener,
                elem.optionsOrUseCapture, target, type, listener,
                optionsOrUseCapture);
    });

    if (!alreadyExists) {
        target.addEventListener(type, listener, optionsOrUseCapture);
        _pGlob.eventListeners.push({ target, type, listener, optionsOrUseCapture });
    }
}

// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;

        bindListener(elem, eventType, callback);
    }
}

function setScreenScale(factor) {

    // already have maximum pixel ratio in HiDPI mode
    if (!appInstance.useHiDPIRenderPass)
        appInstance.renderer.setPixelRatio(factor);

    if (appInstance.postprocessing)
        appInstance.postprocessing.composer.setPixelRatio(factor);

    // to update possible post-processing passes
    appInstance.onResize();
}

// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    if (appInstance.scene) {
        appInstance.scene.traverse(function(obj) {
            if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
                objFound = obj;
                if (runTime) {
                    _pGlob.objCache[objName] = objFound;
                }
            }
        });
    }
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}

// setActiveCamera puzzle
function setActiveCamera(camName) {
    var camera = getObjectByName(camName);
    if (!camera || !camera.isCamera || appInstance.getCamera() == camera)
        return;
    appInstance.setCamera(camera);
}

// setCameraParam puzzle
function setCameraParam(type, camSelector, param) {

    const camNames = retrieveObjectNames(camSelector);

    camNames.forEach(function(camName) {
        if (!camName)
            return;

        var cam = getObjectByName(camName);
        if (!cam || !cam.isCamera) return;

        if (!(cam.isPerspectiveCamera || cam.isOrthographicCamera)) {
            console.error('setCameraParam: Incompatible camera type, have to be perspective or orthographic');
            return;
        }

        let isSetOrbitParam = false;
        let isSetFirstpersonParam = false;

        switch (type) {
            case 'ORBIT_MIN_DISTANCE_PERSP':
            case 'ORBIT_MAX_DISTANCE_PERSP':
            case 'ORBIT_MIN_ZOOM_ORTHO':
            case 'ORBIT_MAX_ZOOM_ORTHO':
            case 'ORBIT_MIN_VERTICAL_ANGLE':
            case 'ORBIT_MAX_VERTICAL_ANGLE':
            case 'ORBIT_MIN_HORIZONTAL_ANGLE':
            case 'ORBIT_MAX_HORIZONTAL_ANGLE':
            case 'ORBIT_ALLOW_TURNOVER':
                isSetOrbitParam = true;
                break;
            case 'ENABLE_COLLISIONS':
                isSetFirstpersonParam = true;
                break;
        }

        let isSetControlsParam = (['ROTATION_SPEED', 'MOVEMENT_SPEED', 'ALLOW_PANNING', 'ALLOW_ZOOM', 'KEYBOARD_CONTROLS'].includes(type) || isSetOrbitParam || isSetFirstpersonParam);

        if (isSetControlsParam) {
            if (!cam.controls) {
                console.error('setCameraParam: The "' + camName +'" camera has no controller');
                return;
            } else if ((isSetOrbitParam && cam.controls.type != 'ORBIT') ||
                    (isSetFirstpersonParam && cam.controls.type != 'FIRST_PERSON')) {
                console.error('setCameraParam: Incompatible camera controller: ' + cam.controls.type);
                return;
            }
        }

        switch (type) {
            case 'FIELD_OF_VIEW':
                if (cam.isPerspectiveCamera) {
                    cam.fov = param;
                    cam.updateProjectionMatrix();
                } else {
                    console.error('setCameraParam: Incompatible camera type, have to be perspective');
                    return;
                }
                break;
            case 'ORTHO_SCALE':
                if (cam.isOrthographicCamera) {
                    cam.zoom = param;
                    cam.updateProjectionMatrix();
                } else {
                    console.error('setCameraParam: Incompatible camera type, have to be orthographic');
                    return;
                }
                break;
            case 'ROTATION_SPEED':
                cam.controls.rotateSpeed = param;
                break;
            case 'MOVEMENT_SPEED':
                cam.controls.moveSpeed = param;
                break;
            case 'ALLOW_PANNING':
                cam.controls.enablePan = param;
                break;
            case 'ALLOW_ZOOM':
                cam.controls.enableZoom = param;
                break;
            case 'KEYBOARD_CONTROLS':
                cam.controls.enableKeys = param;
                break;
            case 'ORBIT_MIN_DISTANCE_PERSP':
                if (cam.isPerspectiveCamera) {
                    cam.controls.orbitMinDistance = param;
                } else {
                    console.error('setCameraParam: Incompatible camera type, have to be perspective');
                    return;
                }
                break;
            case 'ORBIT_MAX_DISTANCE_PERSP':
                if (cam.isPerspectiveCamera) {
                    cam.controls.orbitMaxDistance = param;
                } else {
                    console.error('setCameraParam: Incompatible camera type, have to be perspective');
                    return;
                }
                break;
            case 'ORBIT_MIN_ZOOM_ORTHO':
                if (cam.isOrthographicCamera) {
                    cam.controls.orbitMinZoom = param;
                } else {
                    console.error('setCameraParam: Incompatible camera type, have to be orthographic');
                    return;
                }
                break;
            case 'ORBIT_MAX_ZOOM_ORTHO':
                if (cam.isOrthographicCamera) {
                    cam.controls.orbitMaxZoom = param;
                } else {
                    console.error('setCameraParam: Incompatible camera type, have to be orthographic');
                    return;
                }
                break;
            case 'ORBIT_MIN_VERTICAL_ANGLE':
                cam.controls.orbitMinPolarAngle = v3d.MathUtils.degToRad(param);
                break;
            case 'ORBIT_MAX_VERTICAL_ANGLE':
                cam.controls.orbitMaxPolarAngle = v3d.MathUtils.degToRad(param);
                break;
            case 'ORBIT_MIN_HORIZONTAL_ANGLE':
                cam.controls.orbitMinAzimuthAngle = v3d.MathUtils.degToRad(param);
                break;
            case 'ORBIT_MAX_HORIZONTAL_ANGLE':
                cam.controls.orbitMaxAzimuthAngle = v3d.MathUtils.degToRad(param);
                break;
            case 'ORBIT_ALLOW_TURNOVER':
                cam.controls.orbitEnableTurnover = param;
                break;
            case 'ENABLE_COLLISIONS':
                cam.controls.enableCollisions = param;
                break;
            case 'CLIP_START':
                cam.near = param;
                cam.updateProjectionMatrix();
                break;
            case 'CLIP_END':
                cam.far = param;
                cam.updateProjectionMatrix();
                break;
        }

        if (isSetControlsParam)
            appInstance.enableControls();

    });
}

// Describe this function...
function hide_navigation_buttons() {
  setHTMLElemStyle('display', 'none', 'button_container', false);
  setHTMLElemStyle('display', 'none', 'internal_header_text', false);
  setHTMLElemStyle('display', 'none', 'vehicle_features_container', false);
  setHTMLElemStyle('display', 'none', 'main_container', false);
}

// dictCreateWith puzzle
function dictCreateWith(keys, values) {
    const dict = {};

    keys = Array.isArray(keys) ? keys : keys.split(/\r?\n/).filter(key => key).map(key => key.trim());
    values = Array.isArray(values) ? values : values.split(/\r?\n/).map(key => key.trim());

    for (let i = 0; i < keys.length; i++) {
        dict[keys[i]] = values[i];
    }

    return dict;
}

// dictGet puzzle
function dictGet(dict, key) {
    if (dict && typeof dict == 'object')
        return dict[key];
}

// getEntityByName puzzle
function getEntityByName(name, getWhat) {
    switch (getWhat) {
        case 'OBJECT':
        case 'ANIMATION':
        case 'MATERIAL':
            return name;
        case 'GROUP':
            return ['GROUP', name];
    }
}

function findUniqueObjectName(name) {
    function objNameUsed(name) {
        return Boolean(getObjectByName(name));
    }
    while (objNameUsed(name)) {
        var r = name.match(/^(.*?)(\d+)$/);
        if (!r) {
            name += "2";
        } else {
            name = r[1] + (parseInt(r[2], 10) + 1);
        }
    }
    return name;
}

// addAnnotation and removeAnnotation puzzles
function handleAnnot(add, annot, objSelector, contents, id, name) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        // check if it already has an annotation and remove it
        for (var j = 0; j < obj.children.length; j++) {
            var child = obj.children[j];
            if (child.type == "Annotation") {
                // delete all childs of annotation
                child.traverse(function(child2) {
                    if (child2.isAnnotation)
                        child2.dispose();
                    });
                obj.remove(child);
            }
        }
        if (add) {
            var aObj = new v3d.Annotation(appInstance.container, annot, contents);
            aObj.name = findUniqueObjectName(name ? name : annot);
            aObj.fadeObscured = _pGlob.fadeAnnotations;
            if (id) {
                aObj.annotation.id = id;
                aObj.annotationDialog.id = id+'_dialog';
            }
            obj.add(aObj);
        }
    }
}

// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}

// autoRotateCamera puzzle
function autoRotateCamera(enabled, speed) {

    if (appInstance.controls && appInstance.controls instanceof v3d.OrbitControls) {
        appInstance.controls.autoRotate = enabled;
        appInstance.controls.autoRotateSpeed = speed;
    } else {
        console.error('autorotate camera: Wrong controls type');
    }
}

// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}

// Describe this function...
function show_main_annotations() {
  registerSetTimeout(0.2, function() {
    var i_list = ['Industrial', 'Medical', 'Aerospace', 'Defense', 'Semiconductor', 'eMobility & <br> Energy Management', 'Cloud & Telecom'];
    for (var i_index in i_list) {
      let i = i_list[i_index];
      handleAnnot(true, i, getEntityByName(dictGet(main_blocks, i), 'OBJECT'), '', dictGet(annotation_id, i), undefined);
      setHTMLElemAttribute('className', 'main_annotation', dictGet(annotation_id, i), false);
    }
    autoRotateCamera(true, 0.2);
  });
}

// createCSSRule puzzle
function createCSSRule(cssRule, cssRuleCont, isParent, mediaRule) {
    var style = document.createElement('style');
    style.type = 'text/css';
    if (mediaRule) {
        style.innerHTML = `@media ${mediaRule} { ${cssRule} { ${cssRuleCont} } }`;
    } else {
        style.innerHTML = `${cssRule} { ${cssRuleCont} }`;
    }

    var styles = (isParent) ? parent.document.getElementsByTagName('head')[0] :
                              document.getElementsByTagName('head')[0];
    styles.appendChild(style)
}

// setCSSRuleStyle puzzle
function setCSSRuleStyle(prop, value, id, isParent, mediaRule) {
    var styles = (isParent) ? parent.document.styleSheets : document.styleSheets;
    for (var i = 0; i < styles.length; i++) {
        /**
         * workaround for "DOMException: Failed to read the 'cssRules' property
         * from 'CSSStyleSheet': Cannot access rules"
         */
        try { var cssRules = styles[i].cssRules; }
        catch (e) { continue; }

        for (var j = 0; j < cssRules.length; j++) {
            var cssRule = cssRules[j];
            if (!mediaRule && cssRule.selectorText == id)
                cssRule.style[prop] = value;
            else if (mediaRule && cssRule.media && cssRule.media.mediaText == mediaRule) {
                var cssRulesMedia = cssRule.cssRules;
                for (var k = 0; k < cssRulesMedia.length; k++) {
                    if (cssRulesMedia[k].selectorText == id)
                        cssRulesMedia[k].style[prop] = value;
                }
            }
        }
    }
}

// Describe this function...
function set_css_rule_main_annotaiton() {
  createCSSRule('.main_annotation', 'caret-color: transparent;', false, '');
  setCSSRuleStyle('position', 'absolute', '.main_annotation', false, '');
  setCSSRuleStyle('backgroundColor', '#003057', '.main_annotation', false, '');
  setCSSRuleStyle('color', '#ffffff', '.main_annotation', false, '');
  setCSSRuleStyle('cursor', 'pointer', '.main_annotation', false, '');
  setCSSRuleStyle('width', 'auto', '.main_annotation', false, '');
  setCSSRuleStyle('fontFamily', '"Arial"', '.main_annotation', false, '');
  if (featureAvailable('MOBILE')) {
    setCSSRuleStyle('padding', '4px', '.main_annotation', false, '');
    setCSSRuleStyle('fontSize', '10px', '.main_annotation', false, '');
    setCSSRuleStyle('borderRadius', '4px', '.main_annotation', false, '');
  } else {
    setCSSRuleStyle('padding', '12px', '.main_annotation', false, '');
    setCSSRuleStyle('fontSize', '16px', '.main_annotation', false, '');
    setCSSRuleStyle('borderRadius', '8px', '.main_annotation', false, '');
  }
}

// zoomCamera puzzle
function zoomCamera(objSelector, duration, doSlot) {

    duration = Math.max(0, duration);

    const objNames = retrieveObjectNames(objSelector);

    const zoomObjects = [];
    objNames.forEach(function(name) {
        const obj = getObjectByName(name);
        if (obj) {
            zoomObjects.push(obj);
        }
    });

    if (!zoomObjects.length) {
        return;
    }

    const camera = appInstance.getCamera();

    const zoom = [camera.zoom]; // for orthographic camera only

    const pos = _pGlob.vec3Tmp, target = _pGlob.vec3Tmp2;
    v3d.CameraUtils.calcCameraZoomToObjectsParams(camera, zoomObjects,
            pos, target, zoom);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            if (camera.isOrthographicCamera) {
                appInstance.controls.tweenZoomTo(target, zoom[0],
                        duration, doSlot);
            } else {
                appInstance.controls.tween(pos, target, duration, doSlot);
            }
        }
    } else {
        // TODO: static camera, just position it for now
        if (camera.parent) {
            camera.parent.worldToLocal(pos);
        }
        camera.position.copy(pos);
        camera.lookAt(target);
        camera.zoom = zoom[0];
        camera.updateProjectionMatrix();
        doSlot();
    }
}

// loadScene puzzle
function loadScene(url, sceneName, loadCb, progCb, errorCb) {

    appInstance.unload();

    // clean object cache
    _pGlob.objCache = {};

    _pGlob.percentage = 0;
    appInstance.loadScene(url, function(loadedScene) {
        appInstance.enableControls();
        loadedScene.name = sceneName;

        _pGlob.percentage = 100;
        loadCb();
    }, function(percentage) {
        _pGlob.percentage = percentage;
        progCb();
    }, errorCb);
}

// Describe this function...
function go_back(industry) {
  startPreloader();
  loadScene('boyd_smart_city.gltf.xz', 'boyd_smart_city.gltf.xz', function() {
    endPreloader();
    autoRotateCamera(true, 0.2);
    zoomCamera(getEntityByName(dictGet(block, industry), 'OBJECT'), 2, function() {});
    sub_industries_selection_back_button();
    show_internal_blocks();
    setHTMLElemStyle('display', 'flex', 'help_button', false);
  }, function() {
    hide_navigation_buttons();
    updatePreloader(Math.round(_pGlob.percentage));
    setHTMLElemStyle('display', 'block', 'help_button', false);
    setHTMLElemStyle('display', 'none', 'boyd_company_logo', false);
  }, function() {});
  setCameraParam('ALLOW_PANNING', 'Main_camera', false);
}

/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && 'coordSystem' in scene.userData) {
        return scene.userData.coordSystem;
    }

    return 'Y_UP_RIGHT';
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
const eulerV3DToBlenderShortest = function() {

    const eulerTmp = new v3d.Euler();
    const eulerTmp2 = new v3d.Euler();
    const vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        const eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        const eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        const len = vec3Tmp.setFromEuler(eulerBlender).lengthSq();
        const lenAlt = vec3Tmp.setFromEuler(eulerBlenderAlt).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();

// tweenCamera puzzle
function tweenCamera(posOrObj, targetOrObj, duration, doSlot, movementType) {
    var camera = appInstance.getCamera();

    if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = coordsTransform(worldPos, getCoordSystem(), 'Y_UP_RIGHT');
    } else if (posOrObj) {
        var posObj = getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    } else {
        // empty input means: don't change the position
        var worldPos = camera.getWorldPosition(_pGlob.vec3Tmp);
    }

    if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = coordsTransform(worldTarget, getCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var targObj = getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
    }

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot,
                    movementType);
        }
    } else {
        // TODO: static camera, just position it for now
        if (camera.parent) {
            camera.parent.worldToLocal(worldPos);
        }
        camera.position.copy(worldPos);
        camera.lookAt(worldTarget);
        doSlot();
    }
}

// Describe this function...
function go_home() {
  setActiveCamera('Main_camera');
  hide_navigation_buttons();
  if (inception_level == 1) {
    tweenCamera('empty_main_camera', 'empty_center', 1.5, function() {}, 1);
    inception_level = 0;
    show_main_annotations();
    sub_industries_selection();
    handleAnnot(false, '', ['ALL_OBJECTS'], '', '', undefined);
  } else {
    startPreloader();
    loadScene('boyd_smart_city.gltf.xz', 'boyd_smart_city.gltf.xz', function() {
      endPreloader();
      show_main_annotations();
      sub_industries_selection();
      handleAnnot(false, '', ['ALL_OBJECTS'], '', '', undefined);
      setHTMLElemStyle('display', 'flex', 'help_button', false);
    }, function() {
      updatePreloader(Math.round(_pGlob.percentage));
      setHTMLElemStyle('display', 'none', 'help_button', false);
      setHTMLElemStyle('filter', 'none', 'boyd_company_logo', false);
    }, function() {});
    inception_level = 0;
  }
  setCameraParam('ALLOW_ZOOM', 'Main_camera', true);
  setCameraParam('ALLOW_PANNING', 'Main_camera', false);
}

// getEventProperty puzzle
function getEventProperty(prop, event) {
    if (typeof event != "undefined") {
        switch (prop) {
            case 'target.checked':
                return event.target.checked;
            case 'target.id':
                return event.target.id;
            case 'target.value':
                return event.target.value;
            case 'touches.length':
                return event.touches ? event.touches.length : 0;
            case 'touches[0].pageX':
                return event.touches[0].pageX;
            case 'touches[0].pageY':
                return event.touches[0].pageY;
            case 'touches[1].pageX':
                return event.touches[1].pageX;
            case 'touches[1].pageY':
                return event.touches[1].pageY;
            case 'targetTouches.length':
                return event.targetTouches ? event.targetTouches.length : 0;
            case 'targetTouches[0].pageX':
                return event.targetTouches[0].pageX;
            case 'targetTouches[0].pageY':
                return event.targetTouches[0].pageY;
            case 'targetTouches[1].pageX':
                return event.targetTouches[1].pageX;
            case 'targetTouches[1].pageY':
                return event.targetTouches[1].pageY;
            default:
                return event[prop];
        }
    }
}

// Describe this function...
function sub_industries_selection() {
  registerSetTimeout(0.2, function() {
    eventHTMLElem('click', ['annotation_hospital', 'annotation_industrial', 'annotation_aerospace', 'annotation_military', 'annotation_semiconductors', 'annotation_eMobility', 'annotation_cloud'], false, function(event) {
      autoRotateCamera(true, 0.2);
      inception_level = 1;
      handleAnnot(false, '', ['ALL_OBJECTS'], '', '', undefined);
      selected_industry = getEventProperty('target.id', event);
      zoomCamera(getEntityByName(dictGet(block, getEventProperty('target.id', event)), 'OBJECT'), 2, function() {
        get_sub_industries_list(getEventProperty('target.id', event));
        for (var j_index in sub_industries) {
          let j = sub_industries[j_index];
          add_annotation_sub_industries(j, dictGet(sub_industries_objects, j));
        }
        show_internal_blocks();
        show_navigation(null, false, true, false, true);
      });
    });
  });
  setCameraParam('ALLOW_PANNING', 'Main_camera', false);
}

// Describe this function...
function sub_industries_selection_back_button() {
  inception_level = 1;
  get_sub_industries_list(selected_industry);
  for (var j_index2 in sub_industries) {
    let j = sub_industries[j_index2];
    add_annotation_sub_industries(j, dictGet(sub_industries_objects, j));
  }
  show_navigation(null, false, true, false, true);
}

// getAnimations puzzle
function getAnimations(objSelector) {
    const objNames = retrieveObjectNames(objSelector);

    const animations = [];
    for (let i = 0; i < objNames.length; i++) {
        const objName = objNames[i];
        if (!objName)
            continue;
        // use objName as animName - for now we have one-to-one match
        const action = v3d.SceneUtils.getAnimationActionByName(appInstance, objName);
        if (action)
            animations.push(objName);
    }
    return animations;
}

/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}

/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && 'animFrameRate' in scene.userData) {
        return scene.userData.animFrameRate;
    }
    return 24;
}

_pGlob.animMixerCallbacks = [];

var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished)) {
            bindListener(appInstance.mixer, 'finished', onMixerFinished);
        }
    };

}();

// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                action.repetitions = Infinity;

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        case 'SET_SPEED':
            var timeScale = parseFloat(speed);
            action.timeScale = rev ? -timeScale : timeScale;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}

// show and hide puzzles
function openCloseAnnotation(objSelector, bool) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;

        if (obj.isAnnotation)
            obj.setDialogVisibility(bool);
    }
}

// Describe this function...
function add_annotation_sub_industries(annotation_name, object_name) {
  if (featureAvailable('MOBILE') && !(typeof internal_text == 'object' && internal_text.hasOwnProperty(annotation_name))) {
    handleAnnot(true, '', getEntityByName(object_name, 'OBJECT'), '', dictGet(sub_industries_annotation_ids, annotation_name), undefined);
  } else if (featureAvailable('MOBILE') && typeof internal_text == 'object' && internal_text.hasOwnProperty(annotation_name)) {
    handleAnnot(true, dictGet(sub_industries_annotation_ids, annotation_name), getEntityByName(object_name, 'OBJECT'), '', dictGet(sub_industries_annotation_ids, annotation_name), undefined);
  } else {
    handleAnnot(true, dictGet(sub_industries_annotation_ids, annotation_name), getEntityByName(object_name, 'OBJECT'), dictGet(popup_text, annotation_name) ? dictGet(popup_text, annotation_name) : '', dictGet(sub_industries_annotation_ids, annotation_name), undefined);
  }
  if (typeof internal_text == 'object' && internal_text.hasOwnProperty(annotation_name)) {
    setHTMLElemAttribute('className', 'internal_sub_annotation', dictGet(sub_industries_annotation_ids, annotation_name), false);
  } else {
    setHTMLElemAttribute('className', 'sub_annotation', dictGet(sub_industries_annotation_ids, annotation_name), false);
    eventHTMLElem('click', dictGet(sub_industries_annotation_ids, annotation_name), false, function(event) {
      if (featureAvailable('MOBILE')) {
        setHTMLElemStyle('display', 'flex', 'valueStatementsModal', false);
        setHTMLElemAttribute('innerHTML', annotation_name, 'value_statement_header_mobile', false);
        setHTMLElemAttribute('innerHTML', dictGet(popup_text, annotation_name), 'valueStatementsContentId', false);
      }
    });
  }
  eventHTMLElem('mouseover', dictGet(sub_industries_annotation_ids, annotation_name), false, function(event) {
    if (typeof popup_text == 'object' && popup_text.hasOwnProperty(annotation_name)) {
      if (annotation_name == 'Satellite Thermal Control ') {

        operateAnimation('PAUSE', getAnimations('satellite_thermal_control'), null, null, 'AUTO', 1,
                function() {}, false);

            }
      if (annotation_name == 'Robotics Solutions') {

        operateAnimation('PAUSE', getAnimations('Drone_Box'), null, null, 'AUTO', 1,
                function() {}, false);

            }
      autoRotateCamera(false, 0.2);
      openCloseAnnotation(dictGet(sub_industries_annotation_ids, annotation_name), true);
    }
  });
  eventHTMLElem('mouseout', dictGet(sub_industries_annotation_ids, annotation_name), false, function(event) {
    if (annotation_name == 'Satellite Thermal Control ') {

      operateAnimation('RESUME', getAnimations('satellite_thermal_control'), null, null, 'AUTO', 1,
              function() {}, false);

          autoRotateCamera(true, 0.2);
    } else if (annotation_name == 'Robotics Solutions') {

      operateAnimation('RESUME', getAnimations('Drone_Box'), null, null, 'AUTO', 1,
              function() {}, false);

          autoRotateCamera(true, 0.2);
    } else if (annotation_name == 'Infotainment Display & HMI ') {
      autoRotateCamera(false, 0.2);
    } else {
      autoRotateCamera(true, 0.2);
    }
    openCloseAnnotation(dictGet(sub_industries_annotation_ids, annotation_name), false);
  });
}

// Describe this function...
function set_css_rule_sub_annotation() {
  createCSSRule('.sub_annotation', 'caret-color:transparent;', false, '');
  setCSSRuleStyle('display', 'block', '.sub_annotation', false, '');
  setCSSRuleStyle('position', 'absolute', '.sub_annotation', false, '');
  setCSSRuleStyle('color', '#ffffff', '.sub_annotation', false, '');
  setCSSRuleStyle('fontFamily', '"Arial"', '.sub_annotation', false, '');
  setCSSRuleStyle('width', 'auto', '.sub_annotation', false, '');
  setCSSRuleStyle('cursor', 'pointer', '.sub_annotation', false, '');
  setCSSRuleStyle('opacity', '1', '.sub_annotation', false, '');
  if (featureAvailable('MOBILE')) {
    setCSSRuleStyle('width', '8px', '.sub_annotation', false, '');
    setCSSRuleStyle('height', '8px', '.sub_annotation', false, '');
    setCSSRuleStyle('background', 'radial-gradient(circle, #E0673C 50%, transparent 50%, transparent 75%, #E0673C 75% )', '.sub_annotation', false, '');
    setCSSRuleStyle('padding', '4px', '.sub_annotation', false, '');
    setCSSRuleStyle('borderRadius', '16px', '.sub_annotation', false, '');
    setCSSRuleStyle('outline', '3px solid #87CEEB', '.sub_annotation', false, '');
  } else {
    setCSSRuleStyle('backgroundColor', '#E0673C', '.sub_annotation', false, '');
    setCSSRuleStyle('fontSize', '14px', '.sub_annotation', false, '');
    setCSSRuleStyle('padding', '6px', '.sub_annotation', false, '');
    setCSSRuleStyle('borderRadius', '6px', '.sub_annotation', false, '');
  }
}

// Describe this function...
function set_css_rule_internal_sub_annotation() {
  createCSSRule('.internal_sub_annotation', 'caret-color:transparent;', false, '');
  setCSSRuleStyle('display', 'block', '.internal_sub_annotation', false, '');
  setCSSRuleStyle('position', 'absolute', '.internal_sub_annotation', false, '');
  setCSSRuleStyle('backgroundColor', '#E0673C', '.internal_sub_annotation', false, '');
  setCSSRuleStyle('color', '#ffffff', '.internal_sub_annotation', false, '');
  setCSSRuleStyle('fontFamily', '"Arial"', '.internal_sub_annotation', false, '');
  setCSSRuleStyle('width', 'auto', '.internal_sub_annotation', false, '');
  setCSSRuleStyle('cursor', 'pointer', '.internal_sub_annotation', false, '');
  setCSSRuleStyle('opacity', '1', '.internal_sub_annotation', false, '');
  if (featureAvailable('MOBILE')) {
    setCSSRuleStyle('fontSize', '12px', '.internal_sub_annotation', false, '');
    setCSSRuleStyle('padding', '4px', '.internal_sub_annotation', false, '');
    setCSSRuleStyle('borderRadius', '4px', '.internal_sub_annotation', false, '');
    setCSSRuleStyle('outline', '3px solid #87CEEB', '.internal_sub_annotation', false, '');
  } else {
    setCSSRuleStyle('fontSize', '16px', '.internal_sub_annotation', false, '');
    setCSSRuleStyle('padding', '8px', '.internal_sub_annotation', false, '');
    setCSSRuleStyle('borderRadius', '8px', '.internal_sub_annotation', false, '');
    setCSSRuleStyle('outline', '5px solid #87CEEB', '.internal_sub_annotation', false, '');
  }
}

// Describe this function...
function get_sub_industries_list(industry) {
  sub_industries = [];
  if (industry == 'annotation_aerospace') {
    sub_industries = ['Avionics Thermal Chassis', 'Engine Heat Exchanger', 'In-Flight Entertainment HMI', 'Instrument Panel HMI', 'Flame Barrier Insulation'];
  } else if (industry == 'annotation_industrial') {
    sub_industries = ['Industrial Solutions'];
  } else if (industry == 'annotation_hospital') {
    sub_industries = ['Medical Solutions'];
  } else if (industry == 'annotation_semiconductors') {
    sub_industries = ['Semiconductor Solutions'];
  } else if (industry == 'annotation_cloud') {
    sub_industries = ['Data Center Solutions', 'Radio Base Station Rack Cooling'];
  } else if (industry == 'annotation_military') {
    sub_industries = ['Aircraft Engineered Materials  ', 'Radar and Communications Thermals ', 'Satellite Thermal Control ', 'Electronics Thermal Chassis ', 'Land System Electronics Cooling ', 'Defense Flame Barrier Insulation '];
  } else if (industry == 'annotation_eMobility') {
    sub_industries = ['Vehicle Solutions', 'ADAS Compute Cooling', 'EV Charge Station Solutions', 'Renewable Cooling', 'Power Storage Cooling', 'Power Conversion Cooling'];
  } else if (industry == 'Industrial Solutions') {
    sub_industries = ['Industrial HMI & Displays', 'Motor Drive Solutions', '3D Printing and Laser Solutions  ', 'Robotics Solutions'];
  } else if (industry == 'Semiconductor Solutions') {
    sub_industries = ['Test Sockets', 'Chillers', 'Thermal Test Systems', 'Wafer Processing Solutions'];
  } else if (industry == 'EV Solutions') {
    sub_industries = ['EV Battery Cooling ', 'EV Drive Train Cooling ', 'EV Battery Thermal Runaway ', 'EV Battery Compression Pads and Seals '];
  } else if (industry == 'Medical Solutions') {
    sub_industries = ['Medical Imaging Solutions ', 'Stick-to-Skin', 'PCR Diagnostics ', 'Continuous Glucose Monitoring ', 'Interactive Display Solutions ', 'Medical Equipment Solutions '];
  } else if (industry == 'Data Center Solutions') {
    sub_industries = ['Data Center HMI ', 'Machine Learning & AI Cooling', 'Flame Barrier Electrical Isolation ', 'Processor Cooling '];
  }
}

// getActiveCamera puzzle
function getActiveCamera() {
    var camera = appInstance.getCamera();
    return camera.name;
}

// Describe this function...
function show_internal_blocks() {
  eventHTMLElem('click', ['Industrial Solutions', 'Medical Solutions', 'Vehicle Solutions', 'Data Center Solutions', 'Semiconductor Solutions'], false, function(event) {
    hide_navigation_buttons();
    setHTMLElemStyle('display', 'none', 'help_button', false);
    startPreloader();
    loadScene(dictGet(interior_scene, getEventProperty('target.id', event)), dictGet(interior_scene, getEventProperty('target.id', event)), function() {
      endPreloader();
      setHTMLElemStyle('filter', 'invert(1) brightness(2)', 'boyd_company_logo', false);
      autoRotateCamera(true, 0.1);
      if (getEventProperty('target.id', event) != 'Vehicle Solutions') {
        get_sub_industries_list(getEventProperty('target.id', event));
        for (var k_index in sub_industries) {
          let k = sub_industries[k_index];
          add_annotation_sub_industries(k, dictGet(sub_industries_objects, k));
        }
      }
      show_navigation(getEventProperty('target.id', event), true, true, true, true);
      internal_clicks();
      inception_level = 2;
      setCameraParam('ALLOW_PANNING', getActiveCamera(), false);
    }, function() {
      updatePreloader(Math.round(_pGlob.percentage));
    }, function() {});
  });
}

// Describe this function...
function hide_vehicle_solution_annotations() {
  setHTMLElemStyle('display', 'none', 'Infotainment Display & HMI ', false);
  setHTMLElemStyle('display', 'none', ev_solution_annotations, false);
}

// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
        obj.resolveMultiMaterial().forEach(function(objR) {
            objR.visible = bool;
        });
    }
}

// Describe this function...
function internal_clicks() {
  changeVis('Display', false);
  eventHTMLElem('click', 'infotainment_hmi_button', false, function(event) {
    hide_vehicle_solution_annotations();
    changeVis('Driver_Seat', false);
    changeVis('Seat_02', true);
    changeVis('Main_Body', true);
    changeVis('Display', true);
    changeVis('Battery_Plane', true);
    changeVis('Camera_Screen', true);
    changeVis('Interior', true);
    changeVis('Monitor', true);
    changeVis('Steering', true);
    changeVis('car_base', true);
    tweenCamera('empty_back_seat', 'empty_infotainment_object', 2, function() {
      add_annotation_sub_industries('Infotainment Display & HMI ', dictGet(sub_industries_objects, 'Infotainment Display & HMI '));
    }, 1);
    autoRotateCamera(false, 2);
  });
  eventHTMLElem('click', 'ev_solutions_button', false, function(event) {
    hide_vehicle_solution_annotations();
    changeVis('Driver_Seat', false);
    changeVis('Seat_02', false);
    changeVis('Main_Body', false);
    changeVis('Display', false);
    changeVis('Battery_Plane', false);
    changeVis('Camera_Screen', false);
    changeVis('Interior', false);
    changeVis('Lights', false);
    changeVis('Monitor', false);
    changeVis('Steering', false);
    changeVis('car_base', false);
    tweenCamera('empty_main_camera', 'empty_EV_Solutions', 2, function() {}, 1);
    for (var m_index in ev_solution_annotations) {
      let m = ev_solution_annotations[m_index];
      add_annotation_sub_industries(m, dictGet(sub_industries_objects, m));
    }
    autoRotateCamera(true, 0.2);
  });
  eventHTMLElem('click', 'car_outer_view_button', false, function(event) {
    hide_vehicle_solution_annotations();
    changeVis('Display', false);
    changeVis('Driver_Seat', true);
    changeVis('Seat_02', true);
    changeVis('Main_Body', true);
    changeVis('Battery_Plane', true);
    changeVis('Camera_Screen', true);
    changeVis('Interior', true);
    changeVis('Monitor', true);
    changeVis('Steering', true);
    changeVis('Lights', true);
    changeVis('car_base', true);
    tweenCamera('empty_main_camera', 'empty_EV_Solutions', 2, function() {}, 1);
    autoRotateCamera(true, 0.2);
  });
}

// Describe this function...
function show_navigation(internal_text_content, header, home_button, back_button, help_button) {
  setHTMLElemStyle('display', 'flex', 'main_container', false);
  setHTMLElemStyle('display', 'flex', 'button_container', false);
  setHTMLElemStyle('display', 'block', 'home_button', false);
  if (header == true) {
    setHTMLElemStyle('display', 'flex', 'internal_header_text', false);
    setHTMLElemAttribute('innerHTML', internal_text_content, 'internal_text', false);
    setHTMLElemStyle('display', 'flex', 'internal_text', false);
  } else {
    setHTMLElemStyle('display', 'none', 'internal_header_text', false);
    setHTMLElemStyle('display', 'none', 'internal_text', false);
  }
  if (back_button == true) {
    setHTMLElemStyle('display', 'block', 'back_button', false);
  } else {
    setHTMLElemStyle('display', 'none', 'back_button', false);
  }
  if (internal_text_content == 'Vehicle Solutions') {
    setHTMLElemStyle('display', 'flex', 'vehicle_features_container', false);
  }
  if (help_button == true) {
    setHTMLElemStyle('display', 'flex', 'help_button', false);
  } else {
    setHTMLElemStyle('display', 'none', 'help_button', false);
  }
}

// Describe this function...
function startPreloader() {
  setHTMLElemStyle('display', 'none', ['QUERYSELECTOR', '#v3d-container > canvas'], false);
  registerSetTimeout(0, function() {
    setHTMLElemStyle('display', 'block', 'preloader', false);
    setHTMLElemStyle('width', '0%', 'preloader_bar', false);
  });
}

// Describe this function...
function updatePreloader(percentage) {
  setHTMLElemStyle('width', String(percentage) + '%', 'preloader_bar', false);
  setHTMLElemStyle('maxWidth', '100%', 'preloader_bar', false);
  setHTMLElemAttribute('innerHTML', ['',percentage,'%'].join(''), 'internal-loading-value', false);
}

// Describe this function...
function endPreloader() {
  registerSetTimeout(0, function() {
    setHTMLElemStyle('display', 'block', ['QUERYSELECTOR', '#v3d-container > canvas'], false);
    setHTMLElemStyle('display', 'none', 'preloader', false);
  });
}


setHTMLElemStyle('display', 'flex', 'boyd_company_logo', false);
setHTMLElemStyle('display', 'flex', 'help_button', false);

if (featureAvailable('MOBILE')) {
  setHTMLElemStyle('display', 'flex', 'modal-mobile', false);
} else {
  setHTMLElemStyle('display', 'flex', 'modal-desktop', false);
}
setHTMLElemStyle('display', 'none', 'help_button', false);
eventHTMLElem('click', 'popup-modal-desktop-close', false, function(event) {
  setHTMLElemStyle('display', 'none', 'modal-desktop', false);
  setHTMLElemStyle('display', 'flex', 'help_button', false);
});
eventHTMLElem('click', 'popup-modal-mobile-close', false, function(event) {
  setHTMLElemStyle('display', 'none', 'modal-mobile', false);
  setHTMLElemStyle('display', 'flex', 'help_button', false);
});
eventHTMLElem('click', 'valueStatementsCloseBtn', false, function(event) {
  setHTMLElemStyle('display', 'none', 'valueStatementsModal', false);
});
eventHTMLElem('click', 'help_button', false, function(event) {
  if (featureAvailable('MOBILE')) {
    setHTMLElemStyle('display', 'flex', 'modal-mobile', false);
  } else {
    setHTMLElemStyle('display', 'flex', 'modal-desktop', false);
  }
});

setScreenScale(1.5);
show_main_annotations();
hide_navigation_buttons();
set_css_rule_main_annotaiton();
setActiveCamera('Main_camera');
setCameraParam('ALLOW_PANNING', 'Main_camera', false);
inception_level = 0;

main_block_empties = ['empty_hospital', 'empty_industrial', 'empty_airport', 'empty_military', 'empty_semiconductors', 'empty_EV', 'empty_cloud'];
main_blocks = dictCreateWith(['Medical', 'Industrial', 'Aerospace', 'Defense', 'Semiconductor', 'eMobility & <br> Energy Management', 'Cloud & Telecom'], ['empty_hospital', 'empty_industrial', 'empty_airport', 'empty_military', 'empty_semiconductors', 'empty_EV', 'empty_cloud']);
annotation_id = dictCreateWith(['Medical', 'Industrial', 'Aerospace', 'Defense', 'Semiconductor', 'eMobility & <br> Energy Management', 'Cloud & Telecom'], ['annotation_hospital', 'annotation_industrial', 'annotation_aerospace', 'annotation_military', 'annotation_semiconductors', 'annotation_eMobility', 'annotation_cloud']);
internal_view = dictCreateWith(['Medical', 'Industrial', 'Aerospace', 'Defense', 'Semiconductor', 'eMobility & <br> Energy Management', 'Cloud & Telecom'], ['true', 'true', 'false', 'false', 'true', 'true', 'true']);

selected_industry = 'null';
selected_sub_industry = 'null';
sub_industries_selection();
set_css_rule_internal_sub_annotation();
set_css_rule_sub_annotation();

sub_industries_annotation_ids = dictCreateWith(['Avionics Thermal Chassis', 'Engine Heat Exchanger', 'In-Flight Entertainment HMI', 'Instrument Panel HMI', 'Flame Barrier Insulation', 'Industrial Solutions', 'Robotics Solutions', 'Motor Drive Solutions', '3D Printing and Laser Solutions  ', 'Industrial HMI & Displays', 'Semiconductor Solutions', 'Test Sockets', 'Thermal Test Systems', 'Wafer Processing Solutions', 'Chillers', 'EV Charge Station Solutions', 'Vehicle Solutions', 'ADAS Compute Cooling', 'Medical Solutions', 'Aircraft Engineered Materials  ', 'Radar and Communications Thermals ', 'Satellite Thermal Control ', 'Electronics Thermal Chassis ', 'Land System Electronics Cooling ', 'Defense Flame Barrier Insulation ', 'Data Center Solutions', 'Radio Base Station Rack Cooling', 'Medical Imaging Solutions ', 'Stick-to-Skin', 'PCR Diagnostics ', 'Continuous Glucose Monitoring ', 'Interactive Display Solutions ', 'Medical Equipment Solutions ', 'Data Center HMI ', 'Machine Learning & AI Cooling', 'Flame Barrier Electrical Isolation ', 'Processor Cooling ', 'Infotainment Display & HMI ', 'EV Battery Cooling ', 'EV Drive Train Cooling ', 'EV Battery Thermal Runaway ', 'EV Battery Compression Pads and Seals ', 'Renewable Cooling', 'Power Storage Cooling', 'Power Conversion Cooling'], ['Avionics Thermal Chassis', 'Engine Heat Exchanger', 'In-Flight Entertainment HMI', 'Instrument Panel HMI', 'Flame Barrier Insulation', 'Industrial Solutions', 'Robotics Solutions', 'Motor Drive Solutions', '3D Printing and Laser Solutions  ', 'Industrial HMI & Displays', 'Semiconductor Solutions', 'Test Sockets', 'Thermal Test Systems', 'Wafer Processing Solutions', 'Chillers', 'EV Charge Station Solutions', 'Vehicle Solutions', 'ADAS Compute Cooling', 'Medical Solutions', 'Aircraft Engineered Materials  ', 'Radar and Communications Thermals ', 'Satellite Thermal Control ', 'Electronics Thermal Chassis ', 'Land System Electronics Cooling ', 'Defense Flame Barrier Insulation ', 'Data Center Solutions', 'Radio Base Station Rack Cooling', 'Medical Imaging Solutions ', 'Stick-to-Skin', 'PCR Diagnostics ', 'Continuous Glucose Monitoring ', 'Interactive Display Solutions ', 'Medical Equipment Solutions ', 'Data Center HMI ', 'Machine Learning & AI Cooling', 'Flame Barrier Electrical Isolation ', 'Processor Cooling ', 'Infotainment Display & HMI ', 'EV Battery Cooling ', 'EV Drive Train Cooling ', 'EV Battery Thermal Runaway ', 'EV Battery Compression Pads and Seals ', 'Renewable Cooling', 'Power Storage Cooling', 'Power Conversion Cooling']);
sub_industries_objects = dictCreateWith(['Avionics Thermal Chassis', 'Engine Heat Exchanger', 'In-Flight Entertainment HMI', 'Instrument Panel HMI', 'Flame Barrier Insulation', 'Industrial Solutions', 'Robotics Solutions', 'Motor Drive Solutions', '3D Printing and Laser Solutions  ', 'Industrial HMI & Displays', 'Semiconductor Solutions', 'Test Sockets', 'Thermal Test Systems', 'Wafer Processing Solutions', 'Chillers', 'EV Charge Station Solutions', 'Vehicle Solutions', 'ADAS Compute Cooling', 'Medical Solutions', 'Aircraft Engineered Materials  ', 'Radar and Communications Thermals ', 'Satellite Thermal Control ', 'Electronics Thermal Chassis ', 'Land System Electronics Cooling ', 'Defense Flame Barrier Insulation ', 'Data Center Solutions', 'Radio Base Station Rack Cooling', 'Medical Imaging Solutions ', 'Stick-to-Skin', 'PCR Diagnostics ', 'Continuous Glucose Monitoring ', 'Interactive Display Solutions ', 'Medical Equipment Solutions ', 'Data Center HMI ', 'Machine Learning & AI Cooling', 'Flame Barrier Electrical Isolation ', 'Processor Cooling ', 'Infotainment Display & HMI ', 'EV Battery Cooling ', 'EV Drive Train Cooling ', 'EV Battery Thermal Runaway ', 'EV Battery Compression Pads and Seals ', 'Renewable Cooling', 'Power Storage Cooling', 'Power Conversion Cooling'], ['empty_avionics_thermal_chassis', 'empty_engine_heat_exchanger', 'empty_inflight_entertainment_hmi', 'empty_instrument_panel_hmi', 'empty_aerospace_flame_barrier_insulation', 'Empty_Industrial_Automation', 'drone', 'Motor_Drive_Solutions', '3D Printing', 'HMI', 'empty_semiconductors_internal', 'test_sockets', 'thermal_test_systems', 'wafer_processing_solutions', 'chillers', 'EV_Charge_Station_Solutions', 'Posch', 'ADAS', 'empty_medical_solutions', 'MIG-21', 'radar_and_communications_thermals', 'satellite_thermal_control', 'electronics_thermal_chassis', 'land_system_electronics_cooling', 'defense_flame_barrier_insulation', 'data_center_solutions', 'radio_base_station_rack_cooling', 'Medical Imaging Solutions', 'Stick To Skin', 'PCR Diagnostics', 'Continuous Glucose Monitoring', 'Interactive Display Solutions', 'Medical Equipment Solutions', 'Data Center HMI', 'Machine Learning and AI Cooling', 'Flame Barrier Electrical Isolation', 'Processor Cooling', 'empty_infotainment_hmi', 'EV Battery Cooling', 'EV Drive Train Cooling', 'EV Battery Thermal Runaway', 'EV Battery Compression Pads and Seals', 'empty_renewable_cooling', 'empty_power_storage_solutions', 'empty_power_conversion_cooling']);
block = dictCreateWith(['annotation_industrial', 'annotation_hospital', 'annotation_aerospace', 'annotation_military', 'annotation_semiconductors', 'annotation_eMobility', 'annotation_cloud'], ['zoom_cube_industrial', 'zoom_cube_hospital', 'zoom_cube_aerospace', 'zoom_cube_defence', 'zoom_cube_semiconductors', 'zoom_cube_ev', 'zoom_cube_cloud']);

// Avionics Thermal Chassis
// Instrument panel hmi
// Avionics Thermal Chassis
// Engine Heat Exchanger
// Flame Barrier Insulation
// Machine Learning & AI Cooling
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
// Processor Cooling
// Data Center HMI
// Radio Base Station Rack Cooling
// Flame Barrier Electrical Isolation
// Aircraft Engineered Materials
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
// Satellite Thermal Control
// Radar and Communications Thermals
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
// Land System Electronics Cooling
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
// Electronics Thermal Chassis
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
// Defense Flame Barrier Insulation
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
// EV Battery Cooling
// EV Battery Thermal Runaway
// EV Drive train cooling
// EV Battery Compression Pads and Seals
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
// Infotainment Display & HMI
// ADAS Compute Cooling
// EV Charge Station Solutions
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
// Renewable Cooling
// Power Conversion Cooling
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
// Power Storage Cooling
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
// Wafer Processing Solutions
// Thermal Test Systems
// Test Sockets
// Chillers
//
//
//
//
//
//
//
// Motor Drive Solutions
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
// Robotics Solutions
// 3D Printing & Laser Solutions
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
// Industrial HMI & Displays
// Stick-to-Skin
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
// Continuous Glucose Monitoring
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
// Medical Imagining Solutions
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
// PCR Diagnostics
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
// Medical Equipment Solutions
// Interactive Display Solutions
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
popup_text = dictCreateWith(['In-Flight Entertainment HMI', 'Instrument Panel HMI', 'Avionics Thermal Chassis', 'Engine Heat Exchanger', 'Flame Barrier Insulation', 'Machine Learning & AI Cooling', 'Processor Cooling ', 'Data Center HMI ', 'Radio Base Station Rack Cooling', 'Flame Barrier Electrical Isolation ', 'Aircraft Engineered Materials  ', 'Satellite Thermal Control ', 'Radar and Communications Thermals ', 'Land System Electronics Cooling ', 'Electronics Thermal Chassis ', 'Defense Flame Barrier Insulation ', 'EV Battery Cooling ', 'EV Battery Thermal Runaway ', 'EV Drive Train Cooling ', 'EV Battery Compression Pads and Seals ', 'Infotainment Display & HMI ', 'ADAS Compute Cooling', 'EV Charge Station Solutions', 'Renewable Cooling', 'Power Conversion Cooling', 'Power Storage Cooling', 'Wafer Processing Solutions', 'Thermal Test Systems', 'Test Sockets', 'Chillers', 'Motor Drive Solutions', 'Robotics Solutions', '3D Printing and Laser Solutions  ', 'Industrial HMI & Displays', 'Stick-to-Skin', 'Continuous Glucose Monitoring ', 'Medical Imaging Solutions ', 'PCR Diagnostics ', 'Medical Equipment Solutions ', 'Interactive Display Solutions ', 'Industrial Solutions', 'Medical Solutions', 'Vehicle Solutions', 'Data Center Solutions', 'Semiconductor Solutions'], [('<p>Boyd\'s ISO 9001 Cleanroom converted materials enhance display assemblies and are integrated with rugged, waterproof display gaskets.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/applications/display.html#aerospace-defense" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">A&D Display + HMI</a></p>'), ('<p>Boyd\'s Design for Manufacturing (DFM) assures display components easily assimilate into display subassemblies with an immersive experience.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/applications/display.html#aerospace-defense" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">A&D Display + HMI</a></p>'), ('<p>Boyd\'s liquid cooled electronic chassis maximize thermal performance with integrated liquid flow paths, enabling greater power and compute density in the same space without adding mass.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/thermal/liquid-cooling-systems/liquid-cooled-enclosures-chassis.html" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">Liquid Cooled Chassis and Enclosures</a></p>'), ('<p>Boyd\'s aluminum and high temperature plate fin heat exchangers offer long term reliability in a compact format without adding additional weight and maintain resiliency against high pressure and demanding environments.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/thermal/liquid-cooling-systems/heat-exchangers.html." target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">Engine Heat Exchangers</a></p>'), ('<p>Self-supported, ultra-lightweight thermal and acoustic insulation, SOLIMIDE® Foam, is a self-extinguishing flame blocker, exceeds FAR 25.856 flammability requirements, and emits very little smoke if exposed to flame.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/engineered-materials/insulation-shielding/solimide-insulation-foams.html" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">SOLIMIDE® Foam</a></p>'), ('<p>Boyd increases compute density with high performance liquid cooling systems that maximize cooling performance and sustainability.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/applications/ai-autonomous-compute.html" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">AI Autonomous Compute</a></p>'), ('<p>Boyd\'s extreme air cooling technologies and liquid cooled systems innovate processor performance with custom technologies designed to unlock maximum processor performance.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/applications/ai-autonomous-compute/processor-cooling.html" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">AI Processor Cooling</a></p>'), ('<p>Boyd\'s HMI solutions add differentiated style and improve data center safety and reliability with quality graphics, overlays, and membrane switches.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/applications/display.html#data-center" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">Data Center HMI</a></p>'), ('<p>Boyd’s high durability, low maintenance cooling technologies are backed by decades of trusted field performance, to minimize downtime in 5G installations.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/industries/5g-implementation.html" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">5G Implementation</a></p>'), ('<p>Boyd improves data center safety with flame barriers and electrical isolation that isolates electrical spark and fire.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/engineered-materials/insulation-shielding/electrical-insulation.html" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">Electrical Shielding and Insulation</a></p>'), ('<p>Boyd\'s engineered materials dampen vibration and reduce shock to protect sensitive components like electronics, batteries, and cameras.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/engineered-materials/environmental-sealing-protection/shock-noise-vibration-harshness.html" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">Shock, Noise, and Vibration Dampening</a></p>'), ('<p>Boyd’s encapsulated graphite thermal straps, radiator panels, and heat spreaders, long-distance loop heat pipes, and axially grooved heat pipes are passive components that reliably move and radiate heat to ensure long satellite system lifetimes.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/industries/aerospace-defense/aerospace.html#satellites" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">Remote Thermal Control</a></p>'), ('<p>Boyd\'s vacuum brazed liquid cold plates efficiently transfer heat from electronic systems generating high heat loads to existing coolant loops with high reliability.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/thermal/liquid-cooling-systems/liquid-cold-plates.html" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">Liquid Cooling Plates</a></p>'), ('<p>Boyd’s robust land vehicle engine heat exchangers are tough against demanding use and rugged terrain environments. High temperature plate fin and brazed aluminum heat exchangers balance long lifetime, high reliability, and weight efficiency by packing more heat transfer surfaces in smaller volumes.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/thermal/liquid-cooling-systems/heat-exchangers.html" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">Land System Heat Exchangers</a></p>'), ('<p>Boyd\'s highly reliable, lightweight, low mass, low profile cooling systems enable advancements in aircraft electronics without adding weight or bulk to aircraft designs to protect from high-heat applications.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/thermal/conduction-cooling/heat-spreaders-conductive-chassis.html" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">Heat Spreaders and Conductive Chassis</a></p>'), ('<p>Boyd\'s environmentally friendly, non-toxic, low density, light weight, polyimide foam designed as a high performance thermal and acoustic insulator with a uniquely wide continuous temperature range from below -325°F(-200°C) up to +572°F (+300° C)</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/engineered-materials/insulation-shielding/solimide-insulation-foams.html" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">SOLIMIDE® Foam</a></p>'), ('<p>Maintain homogenous temperatures across battery cells, enable faster charge/discharge cycles, and reduce battery overheating with Boyd\'s thermal management solutions.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/applications/battery/battery-cooling.html" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">Battery Cooling</a></p>'), ('<p>Boyd\'s integrated thermal runaway material solutions combined with rugged liquid cold plates enable smaller, lighter batteries designed to prevent thermal runaway from all sources, and contain it in catastrophic events.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/applications/battery.html#thermal-runaway" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">Battery Thermal Runaway</a></p>'), ('<p>Maximize EV power conversion with Boyd\'s lightweight, compact, high performance liquid cold plates.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/industries/emobility.html#EV-drive-train" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">Drive Train Cooling</a></p>'), ('<p>Enhance consumer safety and extend battery lifetimes by protecting EV batteries from mechanical friction and impact from expansion and contraction during charge/discharge cycles, collision, and tough road conditions with Boyd\'s compression pads and seals.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/applications/battery.html#thermal-runaway" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">Compression Pads and Seals</a></p>'), ('<p>Innovate telematics touch screen display functionality by leveraging Boyd’s decades of smartphone experience and continued HMI research and development to anticipate evolving consumer preferences.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/applications/display/connectivity-telematics.html" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">EV Display + HMI</a></p>'), ('<p>Accelerate advanced driving assistance systems (ADAS) with dense cooling systems from Boyd that unlock high performance compute for level 4 and 5 autonomy.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/applications/ai-autonomous-compute/adas.html" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">ADAS Autonomous Compute</a></p>'), ('<p>Sustain reliable, efficient energy transfer with Boyd\'s liquid and air cooling systems that safely enable fast charging.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/applications/battery/ev-charging.html" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">EV Battery Charging</a></p>'), ('<p>Extend generator and turbine lifetimes and maximize performance with Boyd\'s liquid cold plates, heat exchangers, and advanced heat sinks.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/applications/energy-management.html#renewables" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">Energy Management Renewables</a></p>'), ('<p>Maintain optimal device temperature for high performance IGBTs in power converters and inverters from initial power generation to energy consumption with broad cooling portfolio.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/applications/energy-management/power.html#conversion" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">Energy Management Power Conversion</a></p>'), ('<p>Boyd’s thermal solutions cool, seal and protect energy storage with solutions that increase performance efficiency, optimize resource utilization, maximize energy recovery, and increase reliability across all systems levels.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/applications/energy-management.html#grid-power-battery" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">Grid Power Battery</a></p>'), ('<p>Cool high precision semiconductor fabrication equipment with Boyd\'s liquid cooling systems and insulate with resilient, clean SOLIMIDE® foam.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/applications/automation.html#semiconductor-wafer" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">Semiconductor Wafer Processing</a></p>'), ('<p>Boyd\'s thermal test systems enable silicon leaders to accelerate design and test cycles and introduce innovation more rapidly to market.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/applications/test-systems.html#thermal-test-systems" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">Thermal Test Systems</a></p>'), ('<p>Improve semiconductor reliability and in-line test efficiency using Boyd\'s highly reliable burn-in and test sockets that employ innovative contact technologies.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/applications/test-systems.html#socket-burn-in" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">Burn-In Test Sockets</a></p>'), ('<p>Boyd\'s recirculating chillers are designed for flexibility, implementing a wide variety of pumps, controllers, and additional safety features that enable you to tailor it to your specific application.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/thermal/liquid-cooling-systems/chillers.html" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">Liquid Cooled Chillers</a></p>'), ('<p>Extend lifetimes for automation equipment with Boyd\'s liquid and air cooling and protect moving components with Boyd\'s sealing solutions.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/applications/automation.html#motor-drives" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">Autonomous Motor Drive</a></p>'), ('<p>Boyd seals, cools, shields, and insulates to optimize performance, enhance reliability, and maximize update for industrial robotics used in harsh environments.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/applications/automation.html#robotics" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">Robotic Automation</a></p>'), ('<p>3D printers and lasers operate with precision and high temperature. Leverage Boyd\'s cooling solutions to maintain safe operating temperatures and assure precision manufacturing capabilities.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/applications/automation.html#3d-printing-lasers" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">Laser + 3D Printing</a></p>'), ('<p>Boyd selects optimal display materials that balance performance with optimized cost and assembly complexity, designed to withstand tough and rugged use in industrial environments.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/applications/display.html#industrial" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">Ruggedized Display + HMI</a></p>'), ('<p>Boyd has decades of expertise in selecting skin contact materials for wide varieties of people and skin types. Materials are safe and comfortable for patient wear while being highly specialized for healthcare performance. </p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/applications/medical-wearables.html " target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">Medical Wearable Adhesives</a></p>'), ('<p>Boyd assembles CGM in a streamlined deliverable that aids in the application process. Results are FDA compliant wearable devices designed for patient comfort and safety, healthcare provider efficiency, exacting reliability, and total cost management.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/applications/medical-wearables/continuous-glucose-monitoring.html" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">Continuous Glucose Monitoring</a></p>'), ('<p>Boyd’s decades of innovation in imaging cooling increases thermal density and efficiency, improves imaging system speed and accuracy while reducing energy consumption and total cost of operation. Innovative active and passive cooling technologies are right sized for the application’s thermal density challenges and serviceability.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/applications/test-systems.html#imaging-systems " target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">Test and Imaging Systems</a></p>'), ('<p>Boyd enhances testing accuracy by precisely managing sample stability with high reliability, high performance medical laminates that enable highly accurate fluid flow protected from contaminants through Microfluidic and PCR tests. </p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/applications/test-systems/pcr-diagnostics.html " target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">PCR Diagnostics</a></p>'), ('<p>Boyd’s global medical supply chain features suppliers with entrenched medical culture, ISO 13485 quality management systems, and FDA Registration that assure materials are manufactured with medical compliant processes and traceability.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/industries/medical.html" target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">Medical Equipment</a></p>'), ('<p>Boyd innovates medical displays with smart touch integrated front panels and crisp clarity, rich display graphics from screens that are optimized to environments with varying light levels and sources. Durable displays are designed to be exposed to repeat sanitation processes.</p>' + '\n' +
'<p>Learn More:</p>' + '\n' +
'<p><a href="https://www.boydcorp.com/applications/display.html#medical " target="_blank" style="color: #E0673C; font-weight: bold; transition: color 0.3s ease-in-out;" onmouseover="this.style.color=\'#9D3C19\';" onmouseout="this.style.color=\'#E0673C\';">Medical Displays + HMI</a></p>'), 'Click to explore industrial solutions in detail.', 'Click to explore medical solutions in detail.', 'Click to explore vehicle solutions in detail.', 'Click to explore data center solutions in detail.', 'Click to explore semiconductor solutions in detail.']);

interior_scene = dictCreateWith(['Industrial Solutions', 'Medical Solutions', 'Vehicle Solutions', 'Data Center Solutions', 'Semiconductor Solutions'], ['industrial_internal.gltf.xz', 'medical_internal.gltf.xz', 'vehicle_solutions_internal.gltf.xz', 'data_center_solutions_internal.gltf.xz', 'semiconductor_internal.gltf.xz']);
internal_text = dictCreateWith(['Industrial Solutions', 'Medical Solutions', 'Vehicle Solutions', 'Data Center Solutions', 'Semiconductor Solutions'], ['Industrial Solutions', 'Medical Solutions', 'Vehicle Solutions', 'Data Center Solutions', 'Semiconductor Solutions']);
ev_solution_annotations = ['EV Battery Cooling ', 'EV Drive Train Cooling ', 'EV Battery Thermal Runaway ', 'EV Battery Compression Pads and Seals '];

eventHTMLElem('click', ['home_button', 'back_button'], false, function(event) {
  if (getEventProperty('target.id', event) == 'home_button') {
    go_home();
  } else {
    go_back(selected_industry);
  }
});



} // end of PL.init function

PL.disposeListeners = function() {
    if (_pGlob) {
        _pGlob.eventListeners.forEach(({ target, type, listener, optionsOrUseCapture }) => {
            target.removeEventListener(type, listener, optionsOrUseCapture);
        });
        _pGlob.eventListeners.length = 0;
    }
}

PL.dispose = function() {
    PL.disposeListeners();
    _pGlob = null;
    // backward compatibility
    if (v3d[Symbol.toStringTag] !== 'Module') {
        delete v3d.PL;
        delete v3d.puzzles;
    }
}



return PL;

}

export { createPL };
